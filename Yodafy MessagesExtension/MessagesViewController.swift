//
//  MessagesViewController.swift
//  Yodafy MessagesExtension
//
//  Created by Jack Desmond on 12/30/21.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    @IBOutlet weak var AppTitle: UILabel!
    @IBOutlet weak var Description: UILabel!
    @IBOutlet weak var TextInput: UITextField!

    @IBAction func TranslateButton(_ sender: Any) {
        let userInput: String = TextInput.text!
        
        //Building URL
        let API_KEY = "hqnh9TE6aSmYZ0LfWNnFWAeF"
        let encodedText = userInput.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed)!
        let resourceString = "https://api.funtranslations.com/translate/yoda.json?X-Funtranslations-Api-Secret:\(API_KEY)&text=\(encodedText)"
        let resourceURL = URL(string: resourceString)
        guard resourceURL != nil else {return}
        let session = URLSession.shared
        
        let dataTask = session.dataTask(with: resourceURL!) { (data, response, error) in
            //Check for errors
            if error == nil && data != nil {
                //Parse JSON
                let decoder = JSONDecoder()
                
                do {
                    let welcome = try decoder.decode(Welcome.self, from: data!)
                    let contents = welcome.contents
                    let translation = contents.translated
                    
                    //Sending translated text to iMessage textfield
                    self.activeConversation?.insertText(translation, completionHandler: nil)
                }
                catch {
                    print(error)
                }
            }
        }
        //Make the API call
        dataTask.resume()
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dismisses the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

}
